# Example fragments.

# This file is written in N3 / Turtle

@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2005/06/configuration#> .
@prefix ql:     <http://jena.hpl.hp.com/2003/07/query/> .
@prefix ja:     <http://jena.hpl.hp.com/2005/11/Assembler#> .

## --------------------------------------------------------------
## This file is written in N3 / Turtle
## It is an RDF graph - order of RDF triples does not matter
## to the machine but it does help people who need to edit this file.

## Note: adding rdfs:label to blank nodes will cause Joseki 
## to print that in log messages.


## --------------------------------------------------------------
## About this configuration

<> rdfs:label "Sublima Configuration File" .

## --------------------------------------------------------------
## About this server

[]  rdf:type joseki:Server ;
    joseki:serverDebug   "true" ;
    # Example of some initialization code.
    joseki:initialization
        [ module:implementation 
            [ module:className <java:org.joseki.util.ServiceInitSimple> ;
              rdfs:label "Example initializer" ; ]
        ] ;
    .

## --------------------------------------------------------------
## Services

## Services are best described by a blank node - it's the
## serviceRef that will be used to match requests to services,
## not some resource URI for the description.

## Note that the service reference and the routing of incoming
## requests by URI as defined by web.xml have to align.

# Service 1
# General purpose SPARQL processor, no dataset, expects the
# request to specify the dataset (either by parameters in the
# protocol request or in the query itself).

#[]
#    rdf:type            joseki:Service ;
#    rdfs:label          "service point" ;
#    joseki:serviceRef   "sparql" ;
#    joseki:processor    joseki:ProcessorSPARQL ;
#    .

# Service 2 - SPARQL processor only handling a given dataset
[]
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL on the default db model" ;
    joseki:serviceRef   "sparql" ;
    # dataset part
    joseki:dataset      _:defaultdb ;
    # Service part.
    # This processor will not allow either the protocol,
    # nor the query, to specify the datset.
    joseki:processor    joseki:ProcessorSPARQL ;
    .


## --------------------------------------------------------------
## Datasets


     
# A dataset of one model as the default graph, data loaded from a file.
_:defaultdb   rdf:type ja:RDFDataset ;
    rdfs:label "Defaultdb" ;
   ja:defaultGraph _:modelDB1
#       [ rdfs:label "information-model.n3" ;
#         a ja:MemoryModel ;
#         ja:content [ja:externalContent <file:/home/kkj/dev/sublima/src/main/resources/rdf-data/information-model.n3> ] ;
#       ]
    .

## --------------------------------------------------------------
## Individual graphs  (Jena calls them Models)
## ---- A model, with RDF read from two files.
## (syntax determined by file extension - defaults to RDF/XML)

## ---- Data model

# _:model1  rdf:type ja:MemoryModel ;
#     rdfs:label "Model(plain)" ;
#     ja:content [ ja:externalContent <file:FILE-1.ttl> ] ;
#     ja:content [ ja:externalContent <file:FILE-2.ttl> ] ;
#     .

## ---- Database

## ----------------
## Database, named model in database.
## The graph name here is just some local name - the published name is
## defined in the dataset.
## "reificationMode minimal" allows faster queries to operate.

_:modelDB1 rdf:type ja:RDBModel ;
    rdfs:label "Default PG DB";
#    ja:initialContent [ja:externalContent <file:///home/kkj/dev/sublima/src/main/resources/rdf-data/test-data.n3> ] ;
    ja:connection
    [
        ja:dbType "PostgreSQL" ;
        ja:dbURL          <jdbc:postgresql://localhost/subdata> ;
        ja:dbUser         "subuser" ;
        ja:dbPassword     "subpasswd" ; # Remember, no production passwords here!!
        ja:dbClass        "org.postgresql.Driver" ;
    ] ;
    ja:reificationMode    ja:minimal ;      ## Minimal means fastpath is possible.
    ja:modelName "DEFAULT" 
    .

# # ---- RDFS Inference model - all from one file.

# _:model_inf_1 rdfs:label "Inf-1" ;
#     ja:baseModel 
#         [ a ja:MemoryModel ;
#           ja:content [ja:externalContent <file:test_data_rdfs.ttl>] ;
#         ] ;
#     ja:reasoner
#          [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ]
#     .

# # Separate ABox and TBox

# _:model_inf_2 rdfs:label "Inf-2" ;
#     ja:baseModel 
#         [ a ja:MemoryModel ;
#           ja:content [ja:externalContent <file:Data/test_abox.ttl>] ;
#           ja:content [ja:externalContent <file:Data/test_tbox.ttl>] ;
#         ] ;
#     ja:reasoner
#          [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ] 
#     . 

# # Pellet : a dataset with a single model (Pellet through DIG)
# _:test rdf:type ja:RDFDataset ;
#      rdfs:label "Test" ;
#      ja:defaultGraph
#         [ ja:baseModel
#              [ a ja:MemoryModel ;
#                ja:content [ja:externalContent <http://www.example.org/test>] ; 
#              ] ;
#          ja:reasoner
#              [ <http://jena.hpl.hp.com/2003/JenaReasoner#extReasonerURL>
#                       <http://localhost:8081/> ;
#                ja:reasonerURL <http://jena.hpl.hp.com/2003/DIGReasoner>
#              ]
#         ] ;
#      .



## --------------------------------------------------------------
## Processors
## Usually, this section is empty because only standard
## processors are used via inclusion of common definitions.

## ----- definitions --------------------------------------------------

joseki:ProcessorSPARQL
     rdfs:label "General SPARQL processor" ;
     rdf:type joseki:Processor ;
     module:implementation joseki:ImplSPARQL ;
     # Parameters - this processor processes FROM/FROM NAMED
     joseki:allowExplicitDataset       "true"^^xsd:boolean ;
     joseki:allowWebLoading            "true"^^xsd:boolean ;
     ## And has no locking policy (it loads daat each time).
     ## The default is mutex (one request at a time)
     joseki:lockingPolicy                joseki:lockingPolicyNone ;
     .

joseki:ProcessorSPARQL_FixedDS
    rdfs:label "SPARQL processor for fixed datasets" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # This processor does not accept queries with FROM/FROM NAMED
    joseki:allowExplicitDataset       "false"^^xsd:boolean ;
    joseki:allowWebLoading            "false"^^xsd:boolean ;
    joseki:lockingPolicy              joseki:lockingPolicyMRSW ;
    ## joseki:lockingPolicy                joseki:lockingPolicyMutex ;
    .

joseki:ImplSPARQL
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:org.joseki.processors.SPARQL> .



# Local Variables:        
# tab-width: 4
# indent-tabs-mode: nil
# End:
